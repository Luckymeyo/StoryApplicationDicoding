(()=>{importScripts("https://storage.googleapis.com/workbox-cdn/releases/7.1.0/workbox-sw.js");try{importScripts("./db.bundle.js")}catch(e){console.error("[SW Template] Failed to import DB functions. Background Sync might fail.",e),self.getOutboxItems=async()=>(console.warn("getOutboxItems not available"),[]),self.clearOutbox=async()=>{console.warn("clearOutbox not available")}}if(workbox?workbox.precaching.precacheAndRoute([{'revision':null,'url':'/StoryApplicationDicoding/438.b68bcade2cc8a234d2a9.bundle.js'},{'revision':'a09afd57099dc21e9263ff61a08dff24','url':'/StoryApplicationDicoding/438.b68bcade2cc8a234d2a9.bundle.js.LICENSE.txt'},{'revision':'21a0a0a9b1fdb78eae4c9d97f7e90078','url':'/StoryApplicationDicoding/favicon.png'},{'revision':null,'url':'/StoryApplicationDicoding/favicon.png'},{'revision':'fc206a66d24fe8cc7b1376930538b2c0','url':'/StoryApplicationDicoding/images/icon-192.png'},{'revision':'6bb68d9ad73a48b80addf41f11c0cb5d','url':'/StoryApplicationDicoding/images/icon-512.png'},{'revision':'4f0283c6ce28e888000e978e537a6a56','url':'/StoryApplicationDicoding/images/layers-2x.png'},{'revision':'a6137456ed160d7606981aa57c559898','url':'/StoryApplicationDicoding/images/layers.png'},{'revision':'ac73f380ba0147f4fa5951dfaba2a665','url':'/StoryApplicationDicoding/images/logo.png'},{'revision':'2273e3d8ad9264b7daa5bdbf8e6b47f8','url':'/StoryApplicationDicoding/images/marker-icon.png'},{'revision':'ac028b8374905adbd4f19064624eab91','url':'/StoryApplicationDicoding/index.html'},{'revision':null,'url':'/StoryApplicationDicoding/main.6d3c973d2bdeedfc61a4.css'},{'revision':null,'url':'/StoryApplicationDicoding/main.f9d2fbfe646068025c2c.bundle.js'},{'revision':'35ea879e36da92d5b088ac1c5f972797','url':'/StoryApplicationDicoding/offline.html'},{'revision':null,'url':'/StoryApplicationDicoding/offline.html'},{'revision':null,'url':'/StoryApplicationDicoding/runtime.e80072061d9b4fcffc0b.bundle.js'}]):console.error("Workbox library not loaded."),workbox){const{registerRoute:e,setCatchHandler:o}=workbox.routing,{NetworkFirst:t,StaleWhileRevalidate:n,CacheFirst:s}=workbox.strategies,{CacheableResponsePlugin:a}=workbox.cacheableResponse,{ExpirationPlugin:i}=workbox.expiration;e((({url:e})=>e.href.startsWith("https://story-api.dicoding.dev/")),new t({cacheName:"dicoding-api-cache",plugins:[new a({statuses:[0,200]}),new i({maxEntries:100,maxAgeSeconds:2592e3})]})),e((({url:e})=>"https://fonts.googleapis.com"===e.origin||"https://fonts.gstatic.com"===e.origin),new n({cacheName:"google-fonts-cache",plugins:[new a({statuses:[0,200]}),new i({maxEntries:30,maxAgeSeconds:31536e3})]})),e((({url:e})=>e.href.startsWith("https://use.fontawesome.com/releases/")),new s({cacheName:"fontawesome-cache",plugins:[new a({statuses:[0,200]}),new i({maxEntries:2,maxAgeSeconds:31536e3})]}));const{precacheAndRoute:r,getCacheKeyForURL:c}=workbox.precaching,l="/StoryApplicationDicoding/offline.html";o((({event:e})=>"navigate"===e.request.mode?caches.match(c(l)).then((e=>e?(console.log(`[SW] Serving offline fallback: ${l}`),e):(console.error(`[SW] Offline fallback page ('${l}') not found in cache.`),new Response("Network error: You are offline and the fallback page is not available.",{status:503,statusText:"Service Unavailable",headers:{"Content-Type":"text/plain"}})))).catch((e=>(console.error("[SW] Error during offline fallback:",e),new Response("Offline error occurred.",{status:500,headers:{"Content-Type":"text/plain"}})))):Response.error()))}else console.error("Workbox routing and strategies not loaded.");self.addEventListener("sync",(e=>{"outbox-sync"===e.tag&&(console.log("[Service Worker] Sync event: outbox-sync"),e.waitUntil((async()=>{if("function"!=typeof self.getOutboxItems||"function"!=typeof self.clearOutbox)return void console.error("DB functions not loaded for sync event. Aborting.");const e=await self.getOutboxItems();if(e&&0!==e.length){for(const o of e);await self.clearOutbox()}})()))})),self.addEventListener("push",(e=>{console.log("[Service Worker] Push Received."),e.waitUntil(self.registration.showNotification("Story App",{}))})),self.addEventListener("notificationclick",(e=>{console.log("[Service Worker] Notification click Received."),e.notification.data,e.notification.close(),e.waitUntil(clients.matchAll().then())})),self.addEventListener("install",(()=>{console.log("[Service Worker] Installing..."),self.skipWaiting()})),self.addEventListener("activate",(e=>{console.log("[Service Worker] Activating..."),e.waitUntil(clients.claim())}))})();
//# sourceMappingURL=service-worker.js.map