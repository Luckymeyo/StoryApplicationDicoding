(()=>{importScripts("https://storage.googleapis.com/workbox-cdn/releases/7.1.0/workbox-sw.js");try{importScripts("./db.bundle.js")}catch(e){console.error("[SW Template] Failed to import DB functions. Background Sync might fail.",e),self.getOutboxItems=async()=>(console.warn("getOutboxItems not available"),[]),self.clearOutbox=async()=>{console.warn("clearOutbox not available")}}workbox.precaching.precacheAndRoute([{'revision':null,'url':'/StoryApplicationDicoding/438.b68bcade2cc8a234d2a9.bundle.js'},{'revision':'a09afd57099dc21e9263ff61a08dff24','url':'/StoryApplicationDicoding/438.b68bcade2cc8a234d2a9.bundle.js.LICENSE.txt'},{'revision':'21a0a0a9b1fdb78eae4c9d97f7e90078','url':'/StoryApplicationDicoding/favicon.png'},{'revision':'fc206a66d24fe8cc7b1376930538b2c0','url':'/StoryApplicationDicoding/images/icon-192.png'},{'revision':'6bb68d9ad73a48b80addf41f11c0cb5d','url':'/StoryApplicationDicoding/images/icon-512.png'},{'revision':'4f0283c6ce28e888000e978e537a6a56','url':'/StoryApplicationDicoding/images/layers-2x.png'},{'revision':'a6137456ed160d7606981aa57c559898','url':'/StoryApplicationDicoding/images/layers.png'},{'revision':'ac73f380ba0147f4fa5951dfaba2a665','url':'/StoryApplicationDicoding/images/logo.png'},{'revision':'2273e3d8ad9264b7daa5bdbf8e6b47f8','url':'/StoryApplicationDicoding/images/marker-icon.png'},{'revision':'d80a4fdb9bb5582fc0c6f5397e5936a6','url':'/StoryApplicationDicoding/index.html'},{'revision':null,'url':'/StoryApplicationDicoding/main.265611ac79e474a8b8a6.bundle.js'},{'revision':null,'url':'/StoryApplicationDicoding/main.6d3c973d2bdeedfc61a4.css'},{'revision':'35ea879e36da92d5b088ac1c5f972797','url':'/StoryApplicationDicoding/offline.html'},{'revision':null,'url':'/StoryApplicationDicoding/runtime.e80072061d9b4fcffc0b.bundle.js'},{'revision':null,'url':'/offline.html'}]);const{registerRoute:e,setCatchHandler:o}=workbox.routing,{NetworkFirst:t,StaleWhileRevalidate:n,CacheFirst:i}=workbox.strategies,{CacheableResponsePlugin:a}=workbox.cacheableResponse,{ExpirationPlugin:s}=workbox.expiration,{warmStrategyCache:r}=workbox.recipes;e((({url:e})=>e.href.startsWith("https://story-api.dicoding.dev/")),new t({cacheName:"dicoding-api-cache",plugins:[new a({statuses:[0,200]}),new s({maxEntries:100,maxAgeSeconds:2592e3})]})),e((({url:e})=>"https://fonts.googleapis.com"===e.origin||"https://fonts.gstatic.com"===e.origin),new n({cacheName:"google-fonts-cache",plugins:[new a({statuses:[0,200]}),new s({maxEntries:30,maxAgeSeconds:31536e3})]})),e((({url:e})=>e.href.startsWith("https://use.fontawesome.com/releases/")),new i({cacheName:"fontawesome-cache",plugins:[new a({statuses:[0,200]}),new s({maxEntries:2,maxAgeSeconds:31536e3})]}));const c="/offline.html",l=new t({cacheName:"navigation-cache",plugins:[new a({statuses:[0,200]})]});e((({request:e})=>"navigate"===e.mode),(async e=>{try{return await l.handle(e)||await caches.match(c)}catch(e){return console.log("Serving offline fallback for navigation"),caches.match(c)}})),self.addEventListener("sync",(e=>{"outbox-sync"===e.tag&&(console.log("[Service Worker] Sync event: outbox-sync"),e.waitUntil((async()=>{if("function"!=typeof self.getOutboxItems||"function"!=typeof self.clearOutbox)return void console.error("DB functions not loaded for sync event. Aborting.");const e=await self.getOutboxItems();if(console.log("[Service Worker] Items from outbox:",e),e&&0!==e.length){for(const o of e)try{if(!o.description||!o.photoBlob||!o.token){console.error("[Service Worker] Invalid item in outbox:",o);continue}const e=new FormData;e.append("description",o.description),e.append("photo",o.photoBlob,o.photoFileName||"photo.jpg"),o.lat&&e.append("lat",o.lat),o.lon&&e.append("lon",o.lon),console.log("[Service Worker] Attempting to sync item:",o.description);const t=await fetch("https://story-api.dicoding.dev/v1/stories",{method:"POST",headers:{Authorization:"Bearer "+o.token},body:e});if(!t.ok){const e=await t.json().catch((()=>({message:"Unknown error"})));throw new Error(`Sync failed for item ${o.description}: ${t.status} ${t.statusText} - ${e.message}`)}console.log(`[Service Worker] Item ${o.description} synced successfully.`)}catch(e){console.error("[Service Worker] Failed to sync item:",o,e)}console.log("[Service Worker] Clearing outbox after sync attempt."),await self.clearOutbox()}else console.log("[Service Worker] Outbox is empty.")})()))})),self.addEventListener("push",(e=>{console.log("[Service Worker] Push Received.");let o="Story App",t={body:"Ada notifikasi baru!",icon:"images/icon-192.png",badge:"images/icon-192.png",data:{url:"/"}};try{const n=e.data.json();console.log("[Service Worker] Push data:",n),o=n.title||o,t.body=n.body||t.body,t.icon=n.icon||t.icon,t.badge=n.badge||t.badge,t.data=n.data||t.data}catch(o){console.warn("[Service Worker] Push data is not JSON, trying as text.");try{t.body=e.data.text()||t.body}catch(e){console.warn("[Service Worker] Could not read push data as text.")}}e.waitUntil(self.registration.showNotification(o,t))})),self.addEventListener("notificationclick",(e=>{console.log("[Service Worker] Notification click Received.");const o=e.notification.data,t=o?.url||"/";e.notification.close(),e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then((e=>{for(const o of e)if(o.url===self.location.origin+t&&"focus"in o)return o.focus();if(clients.openWindow)return clients.openWindow(t)})))})),self.addEventListener("install",(()=>{console.log("[Service Worker] Installing..."),self.skipWaiting()})),self.addEventListener("activate",(e=>{console.log("[Service Worker] Activating..."),e.waitUntil(clients.claim())}))})();
//# sourceMappingURL=service-worker.js.map