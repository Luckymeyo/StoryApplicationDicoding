{"version":3,"sources":["webpack://app-starter-project-with-webpack/./src/scripts/sw-template.js"],"names":["importScripts","e","console","error","self","getOutboxItems","async","clearOutbox","workbox","log","core","version","precaching","precacheAndRoute","__WB_MANIFEST","registerRoute","setCatchHandler","routing","NetworkFirst","StaleWhileRevalidate","CacheFirst","strategies","CacheableResponsePlugin","cacheableResponse","ExpirationPlugin","expiration","getCacheKeyForURL","url","href","startsWith","cacheName","plugins","statuses","maxEntries","maxAgeSeconds","origin","offlinePagePath","event","request","mode","caches","match","then","r","Response","catch","err","status","statusText","headers","addEventListener","tag","waitUntil","items","length","item","fd","FormData","append","description","photoBlob","photoFileName","lat","lon","fetch","method","Authorization","token","body","ok","Error","t","o","icon","badge","data","d","json","title","text","registration","showNotification","notification","close","clients","matchAll","type","includeUncontrolled","cL","c","location","focus","openWindow","skipWaiting","claim"],"mappings":"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","file":"service-worker.js","sourceRoot":"","sourcesContent":["// src/scripts/sw-template.js\r\nimportScripts('https://storage.googleapis.com/workbox-cdn/releases/7.1.0/workbox-sw.js');\r\n\r\ntry { importScripts('./db.bundle.js'); }\r\ncatch (e) { console.error(\"[SW] Failed DB import:\", e); self.getOutboxItems=async()=>{return[];}; self.clearOutbox=async()=>{}; }\r\n\r\nif (workbox) {\r\n  console.log(`[SW] Workbox ${workbox.core.version} loaded.`);\r\n  workbox.precaching.precacheAndRoute(self.__WB_MANIFEST);\r\n\r\n  const { registerRoute, setCatchHandler } = workbox.routing;\r\n  const { NetworkFirst, StaleWhileRevalidate, CacheFirst } = workbox.strategies;\r\n  const { CacheableResponsePlugin } = workbox.cacheableResponse;\r\n  const { ExpirationPlugin } = workbox.expiration;\r\n  const { getCacheKeyForURL } = workbox.precaching;\r\n\r\n  registerRoute( ({ url }) => url.href.startsWith('https://story-api.dicoding.dev/'), new NetworkFirst({ cacheName: 'dicoding-api-cache', plugins: [ new CacheableResponsePlugin({ statuses: [0, 200] }), new ExpirationPlugin({ maxEntries: 100, maxAgeSeconds: 30 * 24 * 60 * 60 }), ], }) );\r\n  registerRoute( ({ url }) => url.origin === 'https://fonts.googleapis.com' || url.origin === 'https://fonts.gstatic.com', new StaleWhileRevalidate({ cacheName: 'google-fonts-cache', plugins: [ new CacheableResponsePlugin({ statuses: [0, 200] }), new ExpirationPlugin({ maxEntries: 30, maxAgeSeconds: 365 * 24 * 60 * 60 }), ], }) );\r\n  registerRoute( ({ url }) => url.href.startsWith('https://use.fontawesome.com/releases/'), new CacheFirst({ cacheName: 'fontawesome-cache', plugins: [ new CacheableResponsePlugin({ statuses: [0, 200] }), new ExpirationPlugin({ maxEntries: 2, maxAgeSeconds: 365 * 24 * 60 * 60 }), ], }) );\r\n\r\n  const offlinePagePath = '/StoryApplicationDicoding/offline.html';\r\n  setCatchHandler(({ event }) => {\r\n    switch (event.request.mode) {\r\n      case 'navigate':\r\n        console.log(`[SW] Fallback for navigation. Matching: ${offlinePagePath}`);\r\n        return caches.match(getCacheKeyForURL(offlinePagePath))\r\n          .then(r => r || Response.error()) // Ensure we return Response.error() if match fails before catch\r\n          .catch(err => {\r\n            console.error(`[SW] Offline fallback failed for ${offlinePagePath}:`, err);\r\n            return new Response('Offline page not available.', { status: 503, statusText: 'Offline', headers: { 'Content-Type': 'text/plain' } });\r\n          });\r\n      default: return Response.error();\r\n    }\r\n  });\r\n} else { console.error(\"[SW] Workbox failed to load.\"); }\r\n\r\nself.addEventListener('sync', event => { if (event.tag === 'outbox-sync') { console.log('[SW] Sync: outbox-sync'); event.waitUntil((async () => { if (typeof self.getOutboxItems !== 'function') { return; } const items = await self.getOutboxItems(); if (!items || items.length === 0) return; for (const item of items) { try { const fd = new FormData(); fd.append('description', item.description); fd.append('photo', item.photoBlob, item.photoFileName || 'photo.jpg'); if(item.lat) fd.append('lat', item.lat); if(item.lon) fd.append('lon', item.lon); const r = await fetch('https://story-api.dicoding.dev/v1/stories', { method: 'POST', headers: { Authorization: 'Bearer ' + item.token }, body: fd }); if (!r.ok) throw new Error(`Sync failed: ${r.status}`); console.log('[SW] Synced item:', item.description); } catch (e) { console.error('[SW] Sync item error:', e); } } if(typeof self.clearOutbox === 'function') await self.clearOutbox(); })()); } });\r\nself.addEventListener('push', event => { console.log('[SW] Push Received.'); let t = 'Story App'; let o = { body: 'Ada notifikasi!', icon: '/StoryApplicationDicoding/images/icon-192.png', badge: '/StoryApplicationDicoding/images/icon-192.png', data: { url: '/StoryApplicationDicoding/' } }; try { const d = event.data.json(); t = d.title || t; o.body = d.body || o.body; o.icon = d.icon || o.icon; o.badge = d.badge || o.badge; o.data = d.data || o.data; } catch (e) { try { o.body = event.data.text() || o.body; } catch (err) {} } event.waitUntil( self.registration.showNotification(t, o) ); });\r\nself.addEventListener('notificationclick', event => { console.log('[SW] Notification click.'); const url = event.notification.data?.url || '/StoryApplicationDicoding/'; event.notification.close(); event.waitUntil( clients.matchAll({ type: 'window', includeUncontrolled: true }).then(cL => { for (const c of cL) { if (c.url === self.location.origin + url && 'focus' in c) return c.focus(); } if (clients.openWindow) return clients.openWindow(url); }) ); });\r\nself.addEventListener('install', () => { console.log('[SW] Installing...'); self.skipWaiting(); });\r\nself.addEventListener('activate', event => { console.log('[SW] Activating...'); event.waitUntil(clients.claim()); });"]}