{"version":3,"sources":["webpack://app-starter-project-with-webpack/./src/scripts/sw-template.js"],"names":["importScripts","e","console","error","self","getOutboxItems","async","warn","clearOutbox","workbox","precaching","precacheAndRoute","__WB_MANIFEST","registerRoute","setCatchHandler","routing","NetworkFirst","StaleWhileRevalidate","CacheFirst","strategies","CacheableResponsePlugin","cacheableResponse","ExpirationPlugin","expiration","getCacheKeyForURL","offlinePagePath","event","request","mode","log","caches","match","then","cachedResponse","Response","status","statusText","headers","catch","err","addEventListener"],"mappings":"MACA,cAAc,2EAEd,IACE,cAAc,iBAChB,CAAE,MAAO,GACP,QAAQ,MAAM,2EAA4E,GAC1F,KAAK,eAAiB,UAAc,QAAQ,KAAK,gCAAwC,IACzF,KAAK,YAAc,UAAc,QAAQ,KAAK,4BAA4B,CAC5E,CAEA,GAAI,QAAS,CACX,QAAQ,WAAW,iBAAiB,88CAAK,eAEzC,MAAM,cAAE,EAAa,gBAAE,GAAoB,QAAQ,SAC7C,aAAE,EAAY,qBAAE,EAAoB,WAAE,GAAe,QAAQ,YAC7D,wBAAE,GAA4B,QAAQ,mBACtC,iBAAE,GAAqB,QAAQ,YAC/B,iBAAE,EAAgB,kBAAE,GAAsB,QAAQ,WAGxD,IACA,IACA,IAGA,MAAM,EAAkB,yCAExB,GAAgB,EAAG,WAEV,aADC,EAAM,QAAQ,MAElB,QAAQ,IAAI,mFAAmF,KAExF,OAAO,MAAM,EAAkB,IAC9B,MAAK,GACC,GACF,QAAQ,IAAI,kCAAkC,KACvC,IAET,QAAQ,MAAM,0CAA0C,2BACjD,IAAI,SAAS,yEAA0E,CAC5F,OAAQ,IACR,WAAY,sBACZ,QAAS,CAAE,eAAgB,mBAG/B,OAAM,IACJ,QAAQ,MAAM,uDAAwD,GAC/D,IAAI,SAAS,0BAA2B,CAAE,OAAQ,IAAK,QAAS,CAAE,eAAgB,oBAG5F,SAAS,SAKxB,MACG,QAAQ,MAAM,+BAIjB,KAAK,iBAAiB,QAAQ,QAG9B,KAAK,iBAAiB,QAAQ,QAG9B,KAAK,iBAAiB,qBAAqB,QAG3C,KAAK,iBAAiB,WAAW,SACjC,KAAK,iBAAiB,YAAY","file":"service-worker.js","sourceRoot":"","sourcesContent":["// src/scripts/sw-template.js\r\nimportScripts('https://storage.googleapis.com/workbox-cdn/releases/7.1.0/workbox-sw.js');\r\n\r\ntry {\r\n  importScripts('./db.bundle.js');\r\n} catch (e) {\r\n  console.error(\"[SW Template] Failed to import DB functions. Background Sync might fail.\", e);\r\n  self.getOutboxItems = async () => { console.warn('getOutboxItems not available'); return []; };\r\n  self.clearOutbox = async () => { console.warn('clearOutbox not available'); };\r\n}\r\n\r\nif (workbox) {\r\n  workbox.precaching.precacheAndRoute(self.__WB_MANIFEST);\r\n\r\n  const { registerRoute, setCatchHandler } = workbox.routing;\r\n  const { NetworkFirst, StaleWhileRevalidate, CacheFirst } = workbox.strategies;\r\n  const { CacheableResponsePlugin } = workbox.cacheableResponse;\r\n  const { ExpirationPlugin } = workbox.expiration;\r\n  const { precacheAndRoute, getCacheKeyForURL } = workbox.precaching; // Ensure getCacheKeyForURL is available\r\n\r\n  // --- Runtime Caching (Keep as is) ---\r\n  registerRoute(/* API */);\r\n  registerRoute(/* Google Fonts */);\r\n  registerRoute(/* Font Awesome */);\r\n\r\n  // --- CORRECTED Offline Fallback ---\r\n  const offlinePagePath = '/StoryApplicationDicoding/offline.html'; // Exact path from cache\r\n\r\n  setCatchHandler(({ event }) => {\r\n    switch (event.request.mode) {\r\n      case 'navigate':\r\n        console.log(`[SW] Attempting offline fallback for navigation. Trying to match cache key for: ${offlinePagePath}`);\r\n        // Use getCacheKeyForURL to ensure correct matching\r\n        return caches.match(getCacheKeyForURL(offlinePagePath))\r\n               .then(cachedResponse => {\r\n                  if (cachedResponse) {\r\n                    console.log(`[SW] Serving offline fallback: ${offlinePagePath}`);\r\n                    return cachedResponse;\r\n                  }\r\n                  console.error(`[SW] CRITICAL: Offline fallback page ('${offlinePagePath}') not found in cache!`);\r\n                  return new Response('Network error: You are offline and the fallback page is not available.', {\r\n                    status: 503,\r\n                    statusText: 'Service Unavailable',\r\n                    headers: { 'Content-Type': 'text/plain' },\r\n                  });\r\n               })\r\n               .catch(err => {\r\n                  console.error('[SW] Error during caches.match for offline fallback:', err);\r\n                  return new Response('Offline error occurred.', { status: 500, headers: { 'Content-Type': 'text/plain' }});\r\n               });\r\n      default:\r\n        return Response.error();\r\n    }\r\n  });\r\n  // --- END CORRECTED Offline Fallback ---\r\n\r\n} else {\r\n   console.error(\"Workbox library not loaded.\");\r\n}\r\n\r\n// --- Background Sync (Keep as is, but importScripts still needs fix) ---\r\nself.addEventListener('sync', event => { /* ... */ });\r\n\r\n// --- Push Notification Listener (Keep as is) ---\r\nself.addEventListener('push', event => { /* ... */ });\r\n\r\n// --- Notification Click Listener (Keep as is) ---\r\nself.addEventListener('notificationclick', event => { /* ... */ });\r\n\r\n// --- Service Worker Lifecycle (Keep as is) ---\r\nself.addEventListener('install', () => { /* ... */ });\r\nself.addEventListener('activate', event => { /* ... */ });"]}